@page "/register"
@inject UserService UserService
@inject NavigationManager NavigationManager
@using Ms.Models

<style>
    .register-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #f4f4f9;
    }

    .register-form {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 350px;
        text-align: center;
    }

    .input-field {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .register-button {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 18px;
        cursor: pointer;
        transition: 0.3s;
    }

    .register-button:hover {
        background-color: #0056b3;
    }

    .message {
        margin-top: 10px;
        color: red;
    }

    .login-link {
        margin-top: 15px;
        font-size: 14px;
    }

    .login-link a {
        color: #007bff;
        text-decoration: none;
    }

    .login-link a:hover {
        text-decoration: underline;
    }
</style>

<div class="register-container">
    <div class="register-form">
        <h2>Register Page </h2>
        <input @bind="RegisterUsername" placeholder="Username" class="input-field" />
        <input @bind="RegisterPassword" placeholder="Password" type="password" class="input-field" />
        <input @bind="RegisterEmail" placeholder="Email" class="input-field" />
        <button @onclick="RegisterUser" class="register-button">Register</button>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="message">@Message</p>
    }

    <div class="login-link">
        <p>Already registered? <a href="/login">Login here</a></p>
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string Message = "";
    private bool IsRegistrationSuccessful = false;

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        var users = UserService.LoadUsers();

        if (users.Any(u => u.Username == RegisterUsername))
        {
            Message = "Username already exists. Please login.";
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
            return;
        }

        var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail
            };

        users.Add(newUser);
        UserService.SaveUsers(users);

        Message = "Registration successful! Redirecting to login...";
        IsRegistrationSuccessful = true;
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/login");
    }
}
