@page "/dashboard"
@using Ms.Models
@inject UserService UserService

<h1>Dashboard</h1>

<div class="row">
    <div class="col-md-4">
        <h2>Statistics Overview</h2>
        <ul>
            <li>Total Inflows: @(Data.Transactions.Where(t => t.Credit > 0).Sum(t => t.Credit))</li>
            <li>Total Outflows: @(Data.Transactions.Where(t => t.Debit > 0).Sum(t => t.Debit))</li>
            <li>Total Debts: @(Data.Debts.Sum(d => d.Amount))</li>
            <li>Cleared Debts: @(Data.Debts.Sum(d => d.PaidAmount))</li>
            <li>Remaining Debts: @(Data.Debts.Sum(d => d.Amount - d.PaidAmount))</li>
            <li><strong>Total Balance: @TotalBalance</strong></li> <!-- Add Total Balance here -->
        </ul>
    </div>

    <div class="col-md-4">
        <h2>Highest/Lowest Transactions</h2>
        <ul>
            <li>Highest Inflow: @(Data.Transactions.Where(t => t.Credit > 0).DefaultIfEmpty().Max(t => t?.Credit ?? 0))</li>
            <li>Lowest Inflow: @(Data.Transactions.Where(t => t.Credit > 0).DefaultIfEmpty().Min(t => t?.Credit ?? 0))</li>
            <li>Highest Outflow: @(Data.Transactions.Where(t => t.Debit > 0).DefaultIfEmpty().Max(t => t?.Debit ?? 0))</li>
            <li>Lowest Outflow: @(Data.Transactions.Where(t => t.Debit > 0).DefaultIfEmpty().Min(t => t?.Debit ?? 0))</li>
            <li>Highest Debt: @(Data.Debts.DefaultIfEmpty().Max(d => d?.Amount ?? 0))</li>
            <li>Lowest Debt: @(Data.Debts?.Any() == true ? Data.Debts.Where(d => d != null && d.Amount > 0).DefaultIfEmpty(new Debt { Amount = 0 }).Min(d => d.Amount) : 0)</li>
        </ul>
    </div>

    <div class="col-md-4">
        <h2>Pending Debts</h2>
        <ul>
            @if (Data.Debts.Any(d => d.Amount > d.PaidAmount))
            {
                @foreach (var debt in Data.Debts.Where(d => d.Amount > d.PaidAmount))
                {
                    <li>@debt.Description - Remaining: @(debt.Amount - debt.PaidAmount)</li>
                }
            }
            else
            {
                <li>No pending debts.</li>
            }
        </ul>
    </div>
</div>

<h2>Transaction List</h2>
<div>
    <input type="text" @bind="searchTerm" placeholder="Search by description" class="form-control mb-2" />

    <label>From Date:</label>
    <input type="date" @bind="fromDate" class="form-control mb-2" />

    <label>To Date:</label>
    <input type="date" @bind="toDate" class="form-control mb-2" />

    <select @bind="filterType" class="form-control mb-2">
        <option value="">All</option>
        <option value="Credit">Credit</option>
        <option value="Debit">Debit</option>
        <option value="Debt">Debt</option>
    </select>

    <button @onclick="FilterTransactions" class="btn btn-primary mb-2">Filter</button>

    <select @bind="sortOrder" @bind:event="onchange" @bind:after="SortTransactions" class="form-control mb-2">
        <option value="">Sort by Amount (None)</option>
        <option value="asc">Amount (Low to High)</option>
        <option value="desc">Amount (High to Low)</option>
    </select>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Tags</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                <td>@(transaction.Credit > 0 ? "Credit" : "Debit")</td>
                <td>@(transaction.Credit > 0 ? transaction.Credit : transaction.Debit)</td>
                <td>@string.Join(", ", transaction.Tags ?? new List<string>())</td>
                <td>@transaction.Description</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private AppData Data;
    private string searchTerm = "";
    private string filterType = "";
    private string sortOrder = "";
    private DateTime? fromDate;
    private DateTime? toDate;
    private IEnumerable<Transaction> filteredTransactions;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
        filteredTransactions = Data.Transactions;
    }

    // Property to calculate the total balance
    private decimal TotalBalance => Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);

    private void FilterTransactions()
    {
        filteredTransactions = Data.Transactions
            .Where(t => string.IsNullOrWhiteSpace(searchTerm) || t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(t => string.IsNullOrWhiteSpace(filterType) ||
                        (filterType == "Credit" && t.Credit > 0) ||
                        (filterType == "Debit" && t.Debit > 0))
            .Where(t => !fromDate.HasValue || t.Date >= fromDate.Value) // Filter by start date
            .Where(t => !toDate.HasValue || t.Date <= toDate.Value); // Filter by end date

        SortTransactions(); // Ensure sorting applies after filtering
    }

    private void SortTransactions()
    {
        if (!string.IsNullOrEmpty(sortOrder))
        {
            filteredTransactions = sortOrder == "asc"
                ? filteredTransactions.OrderBy(t => t.Credit > 0 ? t.Credit : t.Debit)
                : filteredTransactions.OrderByDescending(t => t.Credit > 0 ? t.Credit : t.Debit);
        }
    }
}
