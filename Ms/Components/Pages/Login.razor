@page "/login"
@inject UserService UserService
@using Ms.Models
@inject NavigationManager NavigationManager

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #f4f4f9;
    }

    .login-form {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 350px;
        text-align: center;
    }

    .input-field {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .login-button {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 18px;
        cursor: pointer;
        transition: 0.3s;
    }

        .login-button:hover {
            background-color: #0056b3;
        }

    .message {
        margin-top: 10px;
        color: red;
    }

    .register-link {
        margin-top: 15px;
        font-size: 14px;
    }

        .register-link a {
            color: #007bff;
            text-decoration: none;
        }

            .register-link a:hover {
                text-decoration: underline;
            }
</style>

<div class="login-container">
    <div class="login-form">
        <h3>Login</h3>
        <input @bind="LoginUsername" class="input-field" placeholder="Username" />
        <input @bind="LoginPassword" class="input-field" placeholder="Password" type="password" />
        <button @onclick="LoginUser" class="login-button">Login</button>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }

        <div class="register-link">
            <p>Create an Account? <a href="/register">Sign up</a></p>
        </div>
    </div>
</div>

@code {
    private string LoginUsername = "";
    private string LoginPassword = "";
    private string Message = "";

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(LoginUsername) || string.IsNullOrWhiteSpace(LoginPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        var users = UserService.LoadUsers();
        var user = users.FirstOrDefault(u => u.Username == LoginUsername);

        if (user == null || !UserService.ValidatePassword(LoginPassword, user.Password))
        {
            Message = "Invalid username or password.";
            return;
        }

        Message = "Login successful! Redirecting to home...";
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/dashboard");
    }
}
